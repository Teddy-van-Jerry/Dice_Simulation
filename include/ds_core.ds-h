/**
 * @file ds_core.ds-h
 * @brief Core include file for Dice Simulation
 *
 * @date 2021-12-16
 * @version 0.0.1
 * @author Teddy van Jerry
 */

#ifndef DS_CORE_DS_H
#define DS_CORE_DS_H

#include <reactphysics3d/reactphysics3d.h>
#include "ds_global.ds-h"

#include <iostream>
#include <cmath>
#include <random>

// ReactPhysics3D namespace
using namespace reactphysics3d;

/**
 * @namespace ds
 * @brief Dice Simulation Namespace
 * @details Some macro, functions and classes for Dice Simulation.
 */
namespace ds{

    // class

    /**
     * @brief Random Number Support for Dice Simulation
     * @details Use C++ random number engine
     */
    class DSRandom {
    public:

        DSRandom();

        /**
         * @brief Normal Distribution
         * @details Use C++ random number engine
         * @param m means
         * @param s standard deviation
         * @return the random number
         */
        double normal(double m = 0, double s = 1);

        /**
         * @brief Uniform Distribution
         * @details Use C++ random number engine
         * @param min min
         * @param max max
         * @return the random number
         */
        double uniform(double min = 0, double max = 1);

    private:
        std::random_device rd;
        std::mt19937 mt;
    };

    // function prototype

    /**
     * @brief Initialize the Quaternion with four numbers.
     * @details \f$p=(xi,yj,zk,w)\f$
     * @return The normalized Quaternion
     * @param x \f$x\f$
     * @param y \f$y\f$
     * @param z \f$z\f$
     * @param w \f$w\f$
     */
    Quaternion normalQuaternion(double x, double y, double z, double w);
}

#endif // DS_CORE_DS_H
